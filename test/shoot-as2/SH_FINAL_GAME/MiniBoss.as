/*The MiniBoss class is linked to a MiniBoss movie clip in the library that will get attached to stage.*/class MiniBoss extends MovieClip{	//We want to create several varibles to keep track of important MiniBoss information. 	//We must define them here		//This will track the up and down motion of the MiniBoss ship	var yDirection;	//This will define the horizontal speed of the MiniBoss	var speed;	//This will keep track of how often the MiniBoss shoots missiles	var shootTimer;	//This will keep track of the Boss's health	var health;	//This onLoad function is a built-in function of every movie clip. 	//When the MiniBoss is first loaded onto stage (it will get attached to the stage from the library) we want to do several things:	function onLoad()	{		//Set the MiniBoss's health to 100.		health = 100;		//Unhide the enemy health meter.		_root.enemyHealthMeter._visible = true;		//Set it's health bar to full scale, we will update this meter when the MiniBoss take's damage		_root.enemyHealthMeter.bar._xscale = 100;		//Let's set its yDirection to 1 at first (it will move downward, -1 will move it in a negative y diection or upward		yDirection = 1;				//Start the MiniBoss off the right edge of the stage (the stage is 600 pixels wide)		_x = 700;		//Give the MiniBoss a random y position between 50 and 250 (vertical position) to start.		_y = Math.random()*200 + 50;		//set the MiniBoss's horizontal speed to 3.		speed = 3;		//Add this enemy to the ship's list of enemies, its enemies array		_root.ship.enemies.push(this);		//Set the MiniBoss's shoot timer to zero		shootTimer = 0;	}			//This onEnterFrame function is a built-in function of every movie clip. 	//All the code that we need to continuously execute at 30 frames a second goes inside this function	function onEnterFrame()	{		// --- HORIZONTAL MOVEMENT LOGIC---		//If the MiniBoss is still farther right on stage than 400 pixels		//move it to the left 3 pixels (we set the speed to 3 in the onLoad() function)		if(_x > 400){_x -= speed;}				//otherwise we will not move the Boss left anymore. It must be killed.						// --- VERTICAL MOVEMENT LOGIC---		//Move the MiniBoss either up or down 2 pixels (whatever value yDirection is set to)		_y += yDirection * 2;		//If we are moving in the positive y direction (down) and we've gotten low enough on the stage (250 pixles)		if(yDirection == 1 && _y > 250)		{			//reverse the y direction to the negative (up)			yDirection = -1;		}		//Otherwise if we are moving in the negative y direction (up) and we've gotten high enough on the stage (50 pixles)		else if(yDirection == -1 && _y < 50)		{			//reverse the y direction to the positive (down)			yDirection = 1;		}				// --- COLLISION LOGIC---		//If the MiniBoss Ship is hitting the hero ship		if(this.hitTest(_root.ship))		{			//Subtract 25 from the hero ship's health.			_root.ship.updateHealth(-25);			//Attach a small explosion to the stage.			var explosion = _root.attachMovie("SmallExplosion","SmallExplosion" + _root.getNextHighestDepth(),_root.getNextHighestDepth());			//Position the explosion at the ship's position.			explosion._x = _root.ship._x;			explosion._y = _root.ship._y;		}				// --- SHOOTING LOGIC---		//increment the shoot timer variable by one		shootTimer +=1;				//if it reaches 60 (or two seconds)		if(shootTimer > 60)		{			//reset the timer back to zero so it'll start incrementing up toward 60 again			shootTimer = 0;						//And fire a MiniBossMissile (which is a seperate movie clip in the library but uses the same EnemyMissile class: it looks different but behaves the same)			var missile = _root.attachMovie("MiniBossMissile","MiniBossMissile" + _root.getNextHighestDepth(), _root.getNextHighestDepth());			//position the missile at the MiniBoss's location, but offset it, so it looks like its coming from the cannon			missile._x = _x - 63;			missile._y = _y - 8;						//fire two more missiles. This miniboss shoots lots of missiles at the same time			missile = _root.attachMovie("MiniBossMissile","MiniBossMissile" + _root.getNextHighestDepth(), _root.getNextHighestDepth());			missile._x = _x - 63;			missile._y = _y - 8;			//Set this missile's y direction to -1 so this missile will move diagonally upward.			missile.yDirection = -1;						missile = _root.attachMovie("MiniBossMissile","MiniBossMissile" + _root.getNextHighestDepth(), _root.getNextHighestDepth());			missile._x = _x - 63;			missile._y = _y - 8;			//Set this missile's y direction to 1 so this missile will move diagonally downward.			missile.yDirection = 1;		}				//And now we are done with all the logic that needs to happen at frame rate (30 times a second)			}			//Whenver the MiniBoss gets hit by a missile from the hero ship this function is called (see the Missile class)	function takeDamage()	{		//Subtract 10 from the MiniBoss's health. It will take 10 hits to destroy him.		health -=10;		//Update the enemy health meter to reflect the MiniBoss's current percent health		_root.enemyHealthMeter.bar._xscale = health;		//If the MiniBoss's health reaches zero		if(health <=0)		{			//Kill it.			explode();		}	}		//This function is called form the MiniBoss's takeDamage() function when it's health reaches zero	function explode()	{		//First hide the enemy health meter		_root.enemyHealthMeter._visible = false;		//Attach 3 explosions to stage around the position of the MiniBoss		var explosion = _root.attachMovie("Explosion","Explosion" + _root.getNextHighestDepth(),_root.getNextHighestDepth());		explosion._x = _x;		explosion._y = _y;		//Explosion 2		explosion = _root.attachMovie("Explosion","Explosion" + _root.getNextHighestDepth(),_root.getNextHighestDepth());		explosion._x = _x + 30;		explosion._y = _y - 10;		//Explosion 3		explosion = _root.attachMovie("Explosion","Explosion" + _root.getNextHighestDepth(),_root.getNextHighestDepth());		explosion._x = _x - 40;		explosion._y = _y - 5;				//Give the hero ship a thousand points!		_root.ship.updateScore(1000);		//Update the kills stat of the hero ship.		_root.ship.kills += 1;				//Show the 1000 point reward on screen where the MiniBoss was.		var rewardDisplay = _root.attachMovie("RewardPoints","RewardPoints" + _root.getNextHighestDepth(), _root.getNextHighestDepth());		//position the reward display at the location of the MiniBoss		rewardDisplay._x = _x;		rewardDisplay._y = _y;		// the text to reflect points won		rewardDisplay.field.text = 1000;				//Add an explosion sound fx. we create the _root.soundFX sound object in the Ship class		_root.soundFX.attachSound("big_explosion.wav");		_root.soundFX.start();				//Remove the MiniBoss graphic from stage		this.removeMovieClip();		//reset the mini boss timer in the Ship class, so it can start incrementing back up to 30 seconds to release the next miniboss		_root.ship.miniBossTimer = 0;	}	}