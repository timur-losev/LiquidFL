/*The EnemyShip class is linked to an EnemyShip movie clip in the library that will get attached to stage.*/class EnemyShip extends MovieClip{		//We want to create several varibles to keep track of important enemy information. 	//We must define them here		//This will track the up and down motion of the enemy ship	var yDirection;	//This will define the horizontal speed of the enemy	var speed;	//This will keep track of how often the enemy shoots missiles	var shootTimer;		//This onLoad function is a built-in function of every movie clip. 	//When an enemy is first loaded onto stage (it will get attached to the stage from the library) we want to do several things:	function onLoad()	{		//Decide randomly if this enemy will have any vertical motion		if(Math.random() < .4)		{			//If a random number between 0 and 1 is less than .4, give this enemy a vertical movement			yDirection = 1;		}		//or if it will just move straight across the screen		else		{			//if the random number was greater than .4 just set it's vertical mobility to zero			yDirection = 0;		}				//When created, position this enemy off the right edge of the screen		_x = 700;		//Give this enemy a random y position between 50 and 250 pixels		_y = Math.random()*200 + 50;		//Give this enemy a random speed between 3 and 6		speed = Math.random()*3 + 3;		//add this enemy to the heor ship's list of enemies, its enemy array		_root.ship.enemies.push(this);		//set the shoot timer to a random number between 1 and 60, to randomize when this enemy will shoot		shootTimer = Math.floor(Math.random()*60);	}			//This onEnterFrame function is a built-in function of every movie clip. 	//All the code that we need to continuously execute at 30 frames a second goes inside this function	function onEnterFrame()	{		// --- HORIZONTAL MOVEMENT LOGIC---		//move the enemy left whatever its speed happens to be (it's set to a random number between 3 and 6 in the onLoad() function)		_x -= speed;				// --- VERTICAL MOVEMENT LOGIC---		//if this enemy has a y Direction 		if(yDirection != 0)		{			//move the enemy up or down (multiply this value to get various degrees of travel. 3 looked good in this game)			_y += yDirection * 3;						//If we are moving in the positive y direction (down) and we've gotten low enough on the stage (250 pixles)			if(yDirection == 1 && _y > 275)			{				//reverse the y direction to the negative (up)				yDirection = -1;			}			//Otherwise if we are moving in the negative y direction (up) and we've gotten high enough on the stage (50 pixles)			else if(yDirection == -1 && _y < 25)			{				//reverse the y direction to the positive (down)				yDirection = 1;			}		}				//If this enemy has reached beyond the far left side of the stage		if(_x < -100)		{			//just remove it from stage			this.removeMovieClip();		}				// --- COLLISION LOGIC---		//If the enemy Ship is hitting the hero ship		if(this.hitTest(_root.ship))		{			//destroy this enemy			explode();			//if the hero ship's shield is NOT active			if(_root.ship.shield._visible == false)			{				//take 25 health points from the hero ship				_root.ship.updateHealth(-25);			}			//create a small explosion to indicate that the hero ship is taking damage			var explosion = _root.attachMovie("SmallExplosion","SmallExplosion" + _root.getNextHighestDepth(),_root.getNextHighestDepth());			explosion._x = _root.ship._x;			explosion._y = _root.ship._y;		}				// --- SHOOTING LOGIC---		//increment the shoot timer variable by one		shootTimer +=1;				//if it reaches 60 (or two seconds)		if(shootTimer > 60)		{			//reset the timer back to zero so it'll start incrementing up toward 60 again			shootTimer = 0;			//Fire an EnemyMissile, attach one to stage from the library (see the EnemyMissile class)			var missile = _root.attachMovie("EnemyMissile","EnemyMissile" + _root.getNextHighestDepth(), _root.getNextHighestDepth());			//position the missile at the location of the enemy ship			missile._x = _x - 50;			missile._y = _y + 2;		}				//This concludes all of the logic that needs to gets executed continuously at frame rate (30 times a second)	}		//Whenver a regular enemy ship gets hit by a missile from the hero ship this function is called (see the Missile class)		function takeDamage()	{		//just destroy regular enemies on the first hit		explode();	}		//This function is called form the enemy ship's takeDamage() function	function explode()	{		//attach an explosion to the stage at the position of this enemy ship		var explosion = _root.attachMovie("Explosion","Explosion" + _root.getNextHighestDepth(),_root.getNextHighestDepth());		//position this explosion at the location of the enemy ship		explosion._x = _x;		explosion._y = _y;		//give the hero ship 100 points		_root.ship.updateScore(100);		//update the hero ship's kill stat		_root.ship.kills += 1;				//Display reward points at the position of the enemy ship		var rewardDisplay = _root.attachMovie("RewardPoints","RewardPoints" + _root.getNextHighestDepth(), _root.getNextHighestDepth());		rewardDisplay._x = _x;		rewardDisplay._y = _y;		//set the reward text to show the points earned		rewardDisplay.field.text = 100;				//Add an explosion sound fx. we create the _root.soundFX sound object in the Ship class		_root.soundFX.attachSound("big_explosion.wav");		_root.soundFX.start();				//remove this enemy ship from stage		this.removeMovieClip();	}	}